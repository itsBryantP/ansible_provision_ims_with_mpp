---
# tasks file for provision-zcee
- name: Create tempdir
  tempfile:
    state: directory
  register: tmp_file

- name: Provision zCEE
  block:
    # TODO: add option to reserve specific ports
    - name: Reserve ports for zCEE
      block:
        - name: Allocate HTTPS Port
          zport:
            name: '*'
            port: '{{ ZCON_HTTPS_PORT if RESERVE_SPECIFIC_PORT else None | default(omit) }}'
            dsname: '{{ TCPIP_PROFILE }}'
            tmp_dsname: '{{ TCPIP_PROFILE_TMP }}'
            tcp: yes
          register: command_result1

        - name: Allocate HTTP Port
          zport:
            name: '*'
            port: '{{ ZCON_HTTP_PORT if RESERVE_SPECIFIC_PORT else None | default(omit) }}'
            dsname: '{{ TCPIP_PROFILE }}'
            tmp_dsname: '{{ TCPIP_PROFILE_TMP }}'
            tcp: yes
          register: command_result2

        - name: Set TCPPORT variables to new port numbers 
          set_stats:
            data:
              ZCON_HTTPS_PORT: '{{ command_result1.port }}'
              ZCON_HTTP_PORT: '{{ command_result2.port }}'
      when: DYNAMICALLY_RESERVE_PORTS

    # * Need this because Ansible lazily interprets role_path
    # * Results in wrong paths being sent when passing vars that use role_path var
    - set_fact:
        eager_role_path: '{{role_path}}'

    - include_role: 
        name: send-templates
      vars:
        template_path: '{{ eager_role_path }}/templates/*'

    - name: Make scripts executable
      file:
        path: '{{ uss_file_path }}/{{ item }}'
        state: file
        mode: a+x
      loop:
        - mount-zfs.j2 
        - create-zOSConnectServer.j2
        - configure.j2

    - name: Create file for persist passed validation
      shell: echo "ZCON_TEMPLATE_VALIDATION_PASSED true" > {{ TEMP_DIR }}/{{ softwareServiceInstanceName }}.properties 

    - name: Change the permissions of the newly created file
      file: 
        path: '{{ TEMP_DIR }}/{{ softwareServiceInstanceName }}.properties'
        state: file
        mode: '0744'

    # - name: Determine if ZFS filesystem exists
    #   shell: head "//'{{ ZCON_FILE_SYSTEM_HLQ }}.{{softwareServiceInstanceName}}'" > /dev/null 2>&1
    #   register: member_exists
    #   ignore_errors: yes

    # TODO: better checking if filesystem exists instead of allowing high RC
    - name: Create ZFS filesystem
      submit_jcl:
          name: create-zfs.j2 
          path: '{{ uss_file_path }}'
          max_rc: 12
      # when: member_exists.rc != 0

    - name: Delete existing directory if necessary
      file:
        path: '{{ZCON_ZFS_MOUNTPOINT}}/{{softwareServiceInstanceName}}' #/servers/{{softwareServiceInstanceName}}'
        state: absent 

    - name: Create missing directories
      file:
        path: "{{ZCON_ZFS_MOUNTPOINT}}/{{softwareServiceInstanceName}}/.tmp_server"
        state: directory
        recurse: yes 
        mode: '1777'

    - name: Query information about the main mountpoint
      shell: df {{ ZCON_ZFS_MOUNTPOINT }}
      register: mountpoint 

    - set_fact: 
        mount_dataset: "{{ mountpoint.stdout | regex_search(regexp,'\\1') | first }}"
      vars:
        regexp: '[^\s]+\s+\(([^\s]*)\)\s+[0-9]+'

    - name: Run mount ZFS script
      shell: |
        mount_info=$(mount -qv {{ZCON_ZFS_MOUNTPOINT}} | grep {{ mount_dataset }})
        parent_mount=$(expr substr "$mount_info" 5 1)
        case $parent_mount in
          "A")
              echo "Automount (yes)"
              mountvalue="yes"
              ;;
          "U")
              echo "Unmount (unmount)"
              mountvalue="unmount"
              ;;
          "-")
              echo "NoAutomount (no)"
              mountvalue="no"
              ;;
        esac
        mount -t ZFS -a $mountvalue -f {{ZCON_FILE_SYSTEM_HLQ}}.{{softwareServiceInstanceName}} {{ ZCON_INSTALL_DIR }}/wlp/etc
        rc=$?
        if [ $rc -gt 0 ]; then
          echo "Failed to mount the directory see STDERR with RC $rc"
          exit $rc
        fi
      args:
        chdir: /usr/sbin
      ignore_errors: yes
        

    - name: Create folders for install
      file:
        path: '{{ ZCON_INSTALL_DIR }}/wlp/etc/'
        state: directory


    - name: Run zconsetup
      shell: ./zconsetup install
      args:
        chdir: '{{ ZCON_INSTALL_DIR }}/bin/'
        executable: /bin/sh

    - name: Run create zOSConnectServer script  
      shell: ./create-zOSConnectServer.j2
      args:
        chdir: '{{ uss_file_path }}'
        executable: /bin/sh    

    - name: Create dirs 
      file:
        path: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/connections'
        state: directory
        mode: '1777'
    - file:
        path: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/interactions'
        state: directory
        mode: '1777'
    - file:
        path: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/services'
        state: directory
        mode: '1777'

    - name: Move files to correct directories
      shell: mv {{ item.src }} {{ item.dest }}
      loop:
        - { src: '{{ uss_file_path }}/bootstrap.properties', dest: '{{ ZCEE_CONFIG_PATH }}/bootstrap.properties' }
        - { src: '{{ uss_file_path }}/server.xml', dest: '{{ ZCEE_CONFIG_PATH }}/server.xml' }
        - { src: '{{ uss_file_path }}/{{ "keystore_default.xml" if not define_keyring else "keystore_saf.xml"}}', dest: '{{ ZCEE_CONFIG_PATH }}/keystore.xml' }
        - { src: '{{ uss_file_path }}/authentication_saf.xml', dest: '{{ ZCEE_CONFIG_PATH }}/authentication.xml' }
        - { src: '{{ uss_file_path }}/ims-connections.xml', dest: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/connections/ims-connections.xml' }
        - { src: '{{ uss_file_path }}/ims-interactions.xml', dest: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/interactions/ims-interactions.xml' }
        - { src: '{{ uss_file_path }}/ims-admin-services.xml', dest: '{{ ZCEE_CONFIG_PATH }}/ims-admin-services.xml' }
        - { src: '{{ uss_file_path }}/ims-services.xml', dest: '{{ ZCEE_CONFIG_PATH }}/resources/imsmobile-config/services/ims-services.xml' }


    - name:  Create SAF Certificate and Keyring
      include_role:
        name: submit-rexx 
        public: yes
      vars:
        rexx_name: 'defineKeyring.xml'
        max_rc: 0
      when: define_keyring

    - name: Create server proc
      submit_jcl:
          name: create-server-proc.j2 
          path: '{{ uss_file_path }}'

    # - name:  Configure the new z/OS Connect server for z/OS authentication to the angel
    #   include_role:
    #     name: submit-rexx 
    #     public: yes
    #   vars:
    #     rexx_name: 'defineSecurity.j2'
    #     max_rc: 0
    #   when: define_security


    - name: Set Directory Permissions,Remove read and execute access for all users to the zFS file system
      file:
        path:  '{{ZCON_ZFS_MOUNTPOINT}}/{{softwareServiceInstanceName}}'
        state: directory
        mode: '0777'
        recurse: yes 


    - name: Send start region rexx script
      copy:
        src: '{{ role_path }}/files/scripts/start-region.rexx'
        dest: '{{ uss_utilities_path }}/start-region.rexx'

    - shell: chtag -t -c ISO8859-1 start-region.rexx
      args:  
        chdir: '{{ uss_utilities_path }}'

    - file: 
        path: '{{ uss_utilities_path }}/start-region.rexx'
        state: file
        mode: a+x

    - name: Start server console
      shell: '{{ uss_utilities_path }}/start-region.rexx start-server.j2 ST{{softwareServiceInstanceName}}'
      args:
        chdir: '{{ uss_file_path }}'

    # - name: Start server console
    #   shell: submit -j start-server.j2
    #   args:
    #     chdir: '{{ uss_file_path }}'

    # - name:  Check the REST Status from the start command
    #   include_role:
    #     name: submit-rexx 
    #     public: yes
    #   vars:
    #     rexx_name: 'check_startup.j2'
    #     max_rc: 0
  always:
    - name: Delete the temporary folder
      file:
        path: "{{ tmp_file.path }}"
        state: absent
      when: tmp_file
  vars:
    TEMP_DIR: '{{ tmp_file.path }}'
